using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using Normal.Realtime;
using Normal.Realtime.Serialization;

[RealtimeModel]
public partial class NetworkData {
    [RealtimeProperty(1, false, true)]
    private string _verticesJSON = "";
    [RealtimeProperty(2, false, true)]
    private string _trianglesJSON = "";
}

/* ----- Begin Normal Autogenerated Code ----- */
public partial class NetworkData : RealtimeModel {
    public string verticesJSON {
        get {
            return _verticesJSONProperty.value;
        }
        set {
            if (_verticesJSONProperty.value == value) return;
            _verticesJSONProperty.value = value;
            InvalidateUnreliableLength();
            FireVerticesJSONDidChange(value);
        }
    }
    
    public string trianglesJSON {
        get {
            return _trianglesJSONProperty.value;
        }
        set {
            if (_trianglesJSONProperty.value == value) return;
            _trianglesJSONProperty.value = value;
            InvalidateUnreliableLength();
            FireTrianglesJSONDidChange(value);
        }
    }
    
    public delegate void PropertyChangedHandler<in T>(NetworkData model, T value);
    public event PropertyChangedHandler<string> verticesJSONDidChange;
    public event PropertyChangedHandler<string> trianglesJSONDidChange;
    
    public enum PropertyID : uint {
        VerticesJSON = 1,
        TrianglesJSON = 2,
    }
    
    #region Properties
    
    private UnreliableProperty<string> _verticesJSONProperty;
    
    private UnreliableProperty<string> _trianglesJSONProperty;
    
    #endregion
    
    public NetworkData() : base(null) {
        _verticesJSONProperty = new UnreliableProperty<string>(1, _verticesJSON);
        _trianglesJSONProperty = new UnreliableProperty<string>(2, _trianglesJSON);
    }
    
    private void FireVerticesJSONDidChange(string value) {
        try {
            verticesJSONDidChange?.Invoke(this, value);
        } catch (System.Exception exception) {
            UnityEngine.Debug.LogException(exception);
        }
    }
    
    private void FireTrianglesJSONDidChange(string value) {
        try {
            trianglesJSONDidChange?.Invoke(this, value);
        } catch (System.Exception exception) {
            UnityEngine.Debug.LogException(exception);
        }
    }
    
    protected override int WriteLength(StreamContext context) {
        var length = 0;
        length += _verticesJSONProperty.WriteLength(context);
        length += _trianglesJSONProperty.WriteLength(context);
        return length;
    }
    
    protected override void Write(WriteStream stream, StreamContext context) {
        var writes = false;
        writes |= _verticesJSONProperty.Write(stream, context);
        writes |= _trianglesJSONProperty.Write(stream, context);
        if (writes) InvalidateContextLength(context);
    }
    
    protected override void Read(ReadStream stream, StreamContext context) {
        var anyPropertiesChanged = false;
        while (stream.ReadNextPropertyID(out uint propertyID)) {
            var changed = false;
            switch (propertyID) {
                case (uint) PropertyID.VerticesJSON: {
                    changed = _verticesJSONProperty.Read(stream, context);
                    if (changed) FireVerticesJSONDidChange(verticesJSON);
                    break;
                }
                case (uint) PropertyID.TrianglesJSON: {
                    changed = _trianglesJSONProperty.Read(stream, context);
                    if (changed) FireTrianglesJSONDidChange(trianglesJSON);
                    break;
                }
                default: {
                    stream.SkipProperty();
                    break;
                }
            }
            anyPropertiesChanged |= changed;
        }
        if (anyPropertiesChanged) {
            UpdateBackingFields();
        }
    }
    
    private void UpdateBackingFields() {
        _verticesJSON = verticesJSON;
        _trianglesJSON = trianglesJSON;
    }
    
}
/* ----- End Normal Autogenerated Code ----- */
